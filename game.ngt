#include"includes/sound_pool.ngt"
double musicvolume=0, musicmaxvolume=100, musicpan=0, musicmaxpan=100, musicpitch=100, musicmaxpitch=6400;
int musicslot, applock=1, exitapp=1, pausesound=1, resumesound=1, pausefeedback=1, resumefeedback=0, shufflefeedback=1, timeadjust=0, effectstime=250;
int playsoundkey=1, positioning=1, resumekey=1, shufflekey=1, shufflesoundkey=1, timekey=1, volumeadjust=1, panadjust=1, pitchadjust=1, resetvolume=1, resetpan=1, resetpitch=1, spokenvalues=0, spokenvolume=1, spokenpan=1, spokenpitch=1, exitprompt=1, lockpass=0;
string musictype="3dyw";
timer effectstimer;
sound_pool pool;
void main()
{
show_game_window("music player");
musplay();
}
void musplay()
{
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+"music"+random(1,50)+".ogg",true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
while(true)
{
update_game_window();
if(key_pressed(SDLK_UP) and effectstime!=500)
{
if(timeadjust==1)
{
speak(effectstime+50+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime+=50;
}
}
if (key_pressed(SDLK_DOWN) and effectstime!=50)
{
if(timeadjust==1)
{
speak(effectstime-50+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime-=50;
}
}
if (key_pressed(SDLK_m) and timeadjust==1)
{
speak("controler timer,"+effectstime+"ms");
}
if(key_down(SDLK_e) and volumeadjust==1 and musicvolume!=0 and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicvolume);
musicvolume+=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicvolume+=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if(key_down(SDLK_q)  and volumeadjust==1 and musicvolume!=-100 and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicvolume);
musicvolume-=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicvolume-=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if (key_pressed(SDLK_w)  and volumeadjust==1 and musicvolume!=0)
{
if(spokenvalues==1)
{
speak(","+musicvolume);
musicvolume+=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicvolume+=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if (key_pressed(SDLK_s)  and volumeadjust==1 and musicvolume!=-100)
{
if(spokenvalues==1)
{
speak(","+musicvolume);
musicvolume-=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicvolume-=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_down(SDLK_i)  and pitchadjust==1 and musicpitch!=musicmaxpitch and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicpitch);
musicpitch+=2;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicpitch+=2;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if(key_down(SDLK_k)  and pitchadjust==1 and musicpitch!=0 and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicpitch);
musicpitch-=2;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicpitch-=2;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if(key_pressed(SDLK_j)  and pitchadjust==1 and musicpitch!=musicmaxpitch)
{
if(spokenvalues==1)
{
speak(","+musicpitch);
musicpitch+=10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicpitch+=10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(SDLK_f)  and pitchadjust==1 and musicpitch!=0)
{
if(spokenvalues==1)
{
speak(","+musicpitch);
musicpitch-=10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicpitch-=10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if (key_down(SDLK_a)  and panadjust==1 and musicpan!=-100 and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicpan);
musicpan-=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicpan-=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if (key_down(SDLK_d)  and panadjust==1 and musicpan!=musicmaxpan and effectstimer.elapsed_millis()>=effectstime)
{
if(spokenvalues==1)
{
speak(","+musicpan);
musicpan+=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
else if(spokenvalues==0)
{
musicpan+=1;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
effectstimer.restart();
}
}
if (key_pressed(SDLK_z)  and panadjust==1 and musicpan!=-100)
{
if(spokenvalues==1)
{
speak(","+musicpan);
musicpan-=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicpan-=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if (key_pressed(SDLK_c)  and panadjust==1 and musicpan!=musicmaxpan)
{
if(spokenvalues==1)
{
speak(","+musicpan);
musicpan+=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else if(spokenvalues==0)
{
musicpan+=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if (key_pressed(SDLK_v) and spokenvolume==1)
{
speak("music volume,"+musicvolume);
}
if (key_pressed(SDLK_n) and spokenpan==1)
{
speak("music pan,"+musicpan);
}
if (key_pressed(SDLK_h) and spokenpitch==1)
{
speak("music pitch,"+musicpitch);
}
if(key_pressed(SDLK_l) and musicvolume!=0 and resetvolume==1)
{
speak("volume reset");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(key_pressed(SDLK_p) and musicpan!=0 and resetpan==1)
{
speak("pan reset");
musicpan=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(key_pressed(SDLK_t) and musicpitch!=100 and resetpitch==1)
{
speak("pitch reset");
musicpitch=100;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(key_pressed(SDLK_TAB) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="3dyw";
pool.destroy_sound(musicslot);
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+"music"+random(1,50)+".ogg",true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(SDLK_SPACE) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="gc";
pool.destroy_sound(musicslot);
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+"music"+random(1,50)+".ogg",true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(SDLK_BACKSPACE) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="stw";
pool.destroy_sound(musicslot);
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+"music"+random(1,50)+".ogg",true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(SDLK_RETURN) and resumekey==1)
{
if(pool.sound_is_playing(musicslot))
{
playsoundkey=0;
shufflekey=0;
shufflesoundkey=0;
timekey=0;
positioning=0;
timeadjust=0;
shufflefeedback=0;
spokenvolume=0;
spokenpan=0;
spokenpitch=0;
volumeadjust=0;
panadjust=0;
pitchadjust=0;
resetvolume=0;
resetpan=0;
resetpitch=0;
if(pausefeedback==1)  pool.play_stationary("sounds/misc/pause.wav",false);
pool.pause_sound(musicslot);
}
else
{
effectstime=500;
playsoundkey=1;
shufflekey=1;shufflesoundkey=1;
timekey=1;
positioning=1;
shufflefeedback=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
if(resumefeedback==1)  pool.play_stationary("sounds/misc/play.wav",false);
pool.resume_sound(musicslot);
}
}
if (key_pressed(SDLK_BACKSLASH) and shufflesoundkey==1)
{
if(shufflefeedback==1)
{
speak("shuffle sound off");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
shufflefeedback=0;
}
else
{
speak("shuffle sound on");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
shufflefeedback=1;
}
}
if(key_pressed(SDLK_x) and playsoundkey==1)
{
if(pausefeedback==1 and resumefeedback==1)
{
speak("playback sounds off");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
pausefeedback=0;
resumefeedback=0;
}
else
{
speak("playback sounds on");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
pausefeedback=1;
resumefeedback=1;
}
}
if(key_pressed(SDLK_u) and timekey==1)
{
if(timeadjust==1)
{
speak("timer adjustments off");
pool.play_stationary_extended("sounds/misc/misc26.ogg",false,0,0,-5,100,false);
effectstime=500;
timeadjust=0;
}
else
{
speak("timer adjustments on");
pool.play_stationary_extended("sounds/misc/misc27.ogg",false,0,0,-5,100,false);
effectstime=250;
timeadjust=1;
}
}
if (key_pressed(SDLK_y))
{
if(applock==1)
{
speak("keys locked");
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/lock.wav",false);
applock=0;
exitapp=0;
positioning=0;
timeadjust=0;
pausefeedback=0;
resumefeedback=0;
shufflefeedback=0;
playsoundkey=0;
shufflekey=0;
shufflesoundkey=0;
resumekey=0;
timekey=0;
volumeadjust=0;
panadjust=0;
pitchadjust=0;
spokenvolume=0;
spokenpan=0;
spokenpitch=0;
resetvolume=0;
resetpan=0;
resetpitch=0;
}
else
{
speak("keys unlocked");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/unlock.wav",false);
applock=1;
exitapp=1;
positioning=1;
pausefeedback=1;
resumefeedback=1;
shufflefeedback=1;
playsoundkey=1;
shufflekey=1;
shufflesoundkey=1;
resumekey=1;
timekey=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
}
}
if(key_pressed(SDLK_ESCAPE) and exitapp==1)
{
pool.destroy_sound(musicslot);
quit();
}
}
}
